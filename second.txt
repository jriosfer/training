2023-05-04,17:15:28 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:28 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:28 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:28 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:28 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:28 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:28 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:28 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:28 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:28 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:28 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:28 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:28 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:28 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 530.64ms
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:28 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:28 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:28 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:28 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:28 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:28 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:28 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:28 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:28 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:28 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:28 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:28 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:29 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:29 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 594.10ms
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:29 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:29 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:29 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:29 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:29 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:29 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:29 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:29 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:29 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:29 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:29 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:29 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:29 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 454.74ms
2023-05-04,17:15:29 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:29 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 491.88ms
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:29 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:29 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:29 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:29 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:29 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:29 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:29 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:29 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:29 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:29 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:29 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:29 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:30 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:30 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 494.97ms
2023-05-04,17:15:30 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:30 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:30 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:30 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:30 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:30 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:30 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:30 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:30 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:30 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:30 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:30 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:30 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:30 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:30 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:30 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:30 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:30 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 462.47ms
2023-05-04,17:15:34 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:34 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:34 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:34 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:34 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:34 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:34 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:34 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:34 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:34 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:35 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:35 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 471.87ms
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:35 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:35 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:35 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:35 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:35 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:35 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:35 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 485.66ms
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:35 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:35 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:35 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:35 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:35 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:35 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:36 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:36 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 464.56ms
2023-05-04,17:15:36 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:36 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:36 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:36 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:36 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:36 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:36 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:36 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:36 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:36 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:36 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:36 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 476.03ms
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:38 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:38 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:38 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:38 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:38 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:38 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:38 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 486.57ms
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:38 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:38 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:38 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:38 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:38 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:38 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:39 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:39 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 493.85ms
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:39 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:39 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 527.84ms
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:39 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:39 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:39 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 502.87ms
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:39 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:39 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:39 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:39 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:39 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:40 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 488.12ms
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:40 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:40 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 500.05ms
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:40 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:40 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 437.35ms
2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:40 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 439.27ms
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:40 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:40 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 480.20ms
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:40 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:40 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:40 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:40 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:40 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:41 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:41 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 476.32ms
2023-05-04,17:15:41 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:41 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 506.86ms
2023-05-04,17:15:41 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:41 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:41 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:41 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:41 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:41 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:41 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:41 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:41 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:41 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:41 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:41 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:41 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:41 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:41 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:41 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:41 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:41 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 480.07ms
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:43 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:43 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:43 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:43 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 486.31ms
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:43 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:43 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:43 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:43 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:43 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:43 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 491.45ms
2023-05-04,17:15:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 470.97ms
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 525.95ms
2023-05-04,17:15:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 524.08ms
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 483.20ms
2023-05-04,17:15:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 477.90ms
2023-05-04,17:15:45 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:45 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:45 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:45 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:45 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:45 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:45 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:45 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:45 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:45 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 437.84ms
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:50 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:50 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:50 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:50 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 491.74ms
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:50 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:50 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:50 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:50 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:50 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:50 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:50 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:51 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 506.10ms
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:51 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:51 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 498.69ms
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:51 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:51 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 488.46ms
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:51 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:51 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 498.99ms
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:51 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:51 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:51 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:51 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:52 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:52 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 499.40ms
2023-05-04,17:15:52 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:52 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:52 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 492.71ms
2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:15:52 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 73.47ms
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:52 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:52 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:52 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:15:52 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.39ms
2023-05-04,17:15:52 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:52 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 461.05ms
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:52 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:15:52 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 11.95ms
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:52 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:52 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:52 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:15:52 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:15:52 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 7.67ms
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:58 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:58 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:58 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:58 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:58 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:58 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:58 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:58 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:58 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:58 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:58 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:58 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:58 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 527.51ms
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:58 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:58 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:58 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:58 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:58 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:58 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:58 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:58 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:58 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:58 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:58 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:58 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:59 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:15:59 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 535.79ms
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:59 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:59 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:59 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:59 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:59 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:59 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:59 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:59 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:59 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:59 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:59 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:15:59 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:15:59 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 492.04ms
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:15:59 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:15:59 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:15:59 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:15:59 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:15:59 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:59 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:15:59 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:59 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:15:59 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:15:59 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:15:59 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:15:59 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:00 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:00 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 475.83ms
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:00 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:00 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:00 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:00 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:00 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:00 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:00 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:00 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:00 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:00 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:00 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:00 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:00 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 8.49ms
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:00 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:00 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:00 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:00 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:00 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:00 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:00 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:00 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:00 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:00 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:00 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:00 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:00 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:00 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.96ms
2023-05-04,17:16:05 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:05 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:05 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:05 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:05 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:05 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:05 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:05 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:05 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:05 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:05 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:05 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:05 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:05 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:06 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 522.77ms
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:06 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:06 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:06 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 481.48ms
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:06 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:06 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 588.30ms
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:06 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:06 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:06 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:06 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:06 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:07 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 530.86ms
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:07 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:07 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 498.82ms
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:07 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:07 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 485.90ms
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:07 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:07 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:07 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 526.56ms
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:07 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:07 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:07 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:07 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 16.46ms
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:07 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:07 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:07 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:07 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:07 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:07 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:07 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.24ms
2023-05-04,17:16:08 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:08 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 519.39ms
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:08 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:08 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:08 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:08 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:08 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:08 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:08 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:08 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:08 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:08 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:08 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:08 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:08 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 19.63ms
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:08 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:08 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:08 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:08 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:08 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:08 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:08 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:08 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:08 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:08 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:08 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:08 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:08 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:08 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 8.96ms
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:09 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:09 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:09 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:09 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:09 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:09 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:09 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:09 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:09 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:09 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:09 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:09 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:09 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 549.82ms
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:09 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:09 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:09 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:09 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:09 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:09 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:09 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:09 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:09 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:09 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:09 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:09 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:10 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:10 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 536.70ms
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:10 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:10 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:10 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:10 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:10 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:10 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:10 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:10 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:10 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:10 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:10 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:10 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:10 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 476.62ms
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:10 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:10 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:10 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:10 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:10 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:10 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:10 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:10 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:10 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:10 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:10 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:10 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:11 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 712
2023-05-04,17:16:11 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 483.82ms
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:11 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:11 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:11 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:11 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:11 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:11 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:11 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:11 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:11 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:11 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:11 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:11 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:11 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 11.15ms
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:11 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:11 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:11 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:11 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:11 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:11 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:11 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:11 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:11 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:11 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:11 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:11 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:11 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:11 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.92ms
2023-05-04,17:16:17 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:17 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:17 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:17 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:17 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:17 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:17 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:17 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:17 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:17 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:17 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:17 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:17 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:17 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:17 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:17 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:18 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:18 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 555.43ms
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:18 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:18 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:18 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:18 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:18 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:18 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:18 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:18 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:18 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:18 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:18 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:18 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:18 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:18 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:18 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:18 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:18 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:18 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:19 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 506.68ms
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:19 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 582.17ms
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:19 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 507.96ms
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:19 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 494.34ms
2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:19 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:19 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:19 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:19 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:19 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:20 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 475.21ms
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 512.07ms
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:20 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 11.34ms
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:20 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.01ms
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:20 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 499.03ms
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:20 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 9.82ms
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:20 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:20 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 9.01ms
2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:20 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 498.80ms
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:20 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:20 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:20 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:20 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:20 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:21 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:21 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 507.36ms
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:21 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:21 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:21 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:21 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:21 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:21 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:21 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:21 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:21 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:21 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:21 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:21 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 712
2023-05-04,17:16:21 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 472.12ms
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:21 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:21 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:21 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:21 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:21 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:21 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:21 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:21 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:21 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:21 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:21 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:21 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:22 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:22 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 445.17ms
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:22 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:22 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:22 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:22 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:22 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:22 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:22 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:22 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:22 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:22 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:22 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:22 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:22 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.42ms
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:22 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:22 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:22 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:22 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:22 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:22 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:22 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:22 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:22 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:22 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:22 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:22 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:22 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:22 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 8.41ms
2023-05-04,17:16:31 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:31 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:31 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:31 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:31 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:31 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:31 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:31 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:31 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:31 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:31 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:31 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:31 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:31 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:31 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:31 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:32 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 532.80ms
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:32 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:32 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:32 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 509.51ms
2023-05-04,17:16:32 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 530.42ms
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:32 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:32 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:32 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:32 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:32 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:32 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:33 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 490.65ms
2023-05-04,17:16:33 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 503.23ms
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:33 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:33 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:33 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 502.57ms
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:33 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:33 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 533.82ms
2023-05-04,17:16:33 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:33 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:33 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:33 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:33 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.00ms
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:33 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:33 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:33 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:33 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:33 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:33 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:33 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.91ms
2023-05-04,17:16:34 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:34 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 538.35ms
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:34 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:34 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:34 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:34 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 15.55ms
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:34 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:34 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:34 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:34 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 9.88ms
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:34 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:34 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:34 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:34 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 486.37ms
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:34 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:34 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:34 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:34 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:34 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:35 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:35 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 516.58ms
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:35 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:35 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:35 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:35 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:35 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:35 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:35 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 475.95ms
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:35 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:35 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:35 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:35 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:35 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:35 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:35 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:35 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:36 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:36 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:36 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 712
2023-05-04,17:16:36 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 461.99ms
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:36 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:36 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:36 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:36 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 7.13ms
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:36 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:36 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:36 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:36 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.71ms
2023-05-04,17:16:36 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:36 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 478.73ms
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:36 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:36 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:36 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:36 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:36 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:37 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:37 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 492.81ms
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:37 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:37 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:37 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:37 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:37 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:37 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:37 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:37 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:37 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:37 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:37 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:37 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:37 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 470.41ms
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:37 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:37 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:37 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:37 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:37 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:37 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:37 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:37 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:37 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:37 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:37 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:37 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:38 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:38 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 520.83ms
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:38 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:38 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:38 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:38 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:38 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:38 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:38 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 8.73ms
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:38 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:38 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:38 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:38 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:38 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:38 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:38 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:38 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:38 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:38 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 8.55ms
2023-05-04,17:16:43 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:43 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:43 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:43 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:43 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:43 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:43 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:43 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:43 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:43 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:43 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:43 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 502.20ms
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 519.04ms
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:44 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 494.12ms
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:44 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:44 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:44 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:44 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:44 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 486.88ms
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:45 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 470.83ms
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:45 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 490.94ms
2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:45 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:45 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 476.29ms
2023-05-04,17:16:45 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:45 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:45 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 9.10ms
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:45 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:45 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:45 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:45 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:45 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:45 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:45 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:45 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:45 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.35ms
2023-05-04,17:16:46 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:46 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 473.31ms
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:46 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:46 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:46 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:46 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:46 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:46 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:46 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:46 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:46 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:46 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:46 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:46 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:46 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 8.03ms
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:46 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:46 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:46 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:46 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:46 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:46 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:46 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:46 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:46 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:46 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:46 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:46 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:46 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:46 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 7.79ms
2023-05-04,17:16:51 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:51 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:51 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:51 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:51 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:51 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:51 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:51 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:51 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:51 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:51 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:51 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:52 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:52 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 551.94ms
2023-05-04,17:16:52 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:52 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:52 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:52 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:52 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:52 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:52 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:52 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:52 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:52 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:52 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:52 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:53 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:16:53 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 523.02ms
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:53 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:53 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:53 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:53 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:53 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:53 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:53 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:53 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:53 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:53 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:53 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:53 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:53 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 654.19ms
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:53 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:53 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:53 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:53 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:53 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:53 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:53 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:53 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:53 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:53 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:53 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:53 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:16:54 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:16:54 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 530.69ms
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:54 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:54 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:54 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:54 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:54 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:54 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:54 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.53ms
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:16:54 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:16:54 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:16:54 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:16:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:16:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:16:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:16:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:16:54 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:16:54 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Equipment Id position:",i," content:",df.loc[i, 'equipmentId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'serialNumber'] =  result['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:16:54 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3652, in get_loc
    return self._engine.get_loc(casted_key)
  File "pandas\_libs\index.pyx", line 147, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\index.pyx", line 176, in pandas._libs.index.IndexEngine.get_loc
  File "pandas\_libs\hashtable_class_helper.pxi", line 7080, in pandas._libs.hashtable.PyObjectHashTable.get_item
  File "pandas\_libs\hashtable_class_helper.pxi", line 7088, in pandas._libs.hashtable.PyObjectHashTable.get_item
KeyError: 'equipmentId'

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 113, in _user_script
  File "<string>", line 79, in main
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexing.py", line 1096, in __getitem__
    return self.obj._get_value(*key, takeable=self._takeable)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 3879, in _get_value
    series = self._get_item_cache(col)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\frame.py", line 4264, in _get_item_cache
    loc = self.columns.get_loc(item)
  File "D:\Software\fastAPI\lib\site-packages\pandas\core\indexes\base.py", line 3654, in get_loc
    raise KeyError(key) from err
KeyError: 'equipmentId'

2023-05-04,17:16:54 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="KeyError : 'equipmentId'"
2023-05-04,17:16:54 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 10.94ms
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:25:54 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:25:54 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:25:54 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:25:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:25:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:25:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:25:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:25:54 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:25:54 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:25:54 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:25:54 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 569.02ms
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:25:54 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:25:54 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:25:54 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:25:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:25:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:25:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:54 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:25:54 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:54 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:25:54 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         'patientId': prep_string(),
         'active': prep_bool()
     })
 
 def main(df) :
 
     # specify the path to the Tableau Prep flow file
     #flow_path = 'D:/projects/phillips/flow.tfl'
 
     # create a Tableau Prep object
     #tableau_prep = TableauPrep()
 
     # open the Tableau Prep flow file
     #tableau_prep.load_file(flow_path)
 
     # get the list of parameter names defined in the flow
     #parameter_names = [p.name for p in tableau_prep.flow.parameters]
 
     # get the values of each parameter
     #parameter_values = {}
     #for parameter in tableau_prep.flow.parameters:
     #    parameter_values[parameter.name] = parameter.current_value
 
     # display the parameter values
     #print(parameter_values)
 
     # Timestamp
     d = datetime.datetime.utcnow()
     timeStamp = d.strftime('%Y%m%d%H%M%S')
 
     urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/2023-01-01/2023-05-25"
     authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
     result = call_api(urlModule, timeStamp,authorization)
     print ("#####################",result)
 
     df = pd.DataFrame(result)
     print(df.head(3))
     return df
 
 
 l = pd.DataFrame()
 main(l)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:25:54 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:25:55 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/2023-01-01/2023-05-25 HTTP/1.1" 200 None
2023-05-04,17:25:55 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 536.92ms
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:25:55 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:25:55 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:25:55 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:25:55 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:25:55 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:55 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:25:55 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:55 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:25:55 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:25:55 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:25:55 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:25:55 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:25:55 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 506.85ms
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:25:55 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:25:55 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:25:55 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:25:55 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:25:55 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:55 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:25:55 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:55 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:25:55 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:55 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:25:55 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         "city": prep_string(),
         "countryCode": prep_string(),
         "dateOfBirth": prep_string(),
         "email": prep_string(),
         "firstName": prep_string(),
         "gender": prep_string(),
         "lastName": prep_string(),
         "locationIds": prep_string(),
         "orgId": prep_string(),
         "patientId": prep_string(),
         "payerId": prep_string(),
         "phoneNumber": prep_string(),
         "setupDate": prep_string(),
         "state": prep_string(),
         "streetAddress": prep_string()
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             #l_patient_id = "c50dd0e1-7cf4-4324-b163-b2ac526e63d6"
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/patients/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data patientId:",result['patientId'])
             returnData.loc[i,'city'] =  result['city']
             returnData.loc[i,'countryCode'] =   result['countryCode']
             returnData.loc[i,'dateOfBirth'] =  result['dateOfBirth']
             returnData.loc[i,'email'] =   result['email']
             returnData.loc[i,'firstName'] =   result['firstName']
             returnData.loc[i,'gender'] =  result['gender']
             returnData.loc[i,'lastName'] =   result['lastName']
             if result['locationIds'] ==  [] :
                 returnData.loc[i, 'locationIds'] = None
             else :
                 returnData.loc[i, 'locationIds'] = result['locationIds'][0]
             returnData.loc[i,'orgId'] =   result['orgId']
             returnData.loc[i,'patientId'] =   result['patientId']
             returnData.loc[i,'payerId'] =   result['payerId']
             returnData.loc[i,'phoneNumber'] =   result['phoneNumber']
             returnData.loc[i,'setupDate'] =   result['setupDate']
             returnData.loc[i,'state'] =   result['state']
             returnData.loc[i,'streetAddress'] =   result['streetAddress']
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:25:55 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:25:56 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /patients/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:25:56 [INFO] (web.py:web:2344): 200 POST /evaluate (127.0.0.1) 511.71ms
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:25:56 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:25:56 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:25:56 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:25:56 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:25:56 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:56 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:25:56 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:56 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:25:56 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
2023-05-04,17:25:56 [INFO] (base_handler.py:base_handler:115): function to evaluate=def _user_script(tabpy, _arg1):
 import pandas as pd
 def get_output_schema():
 	return 'da956b8d-b215-4908-9f48-47ad201c71d2'
 def prep_string():
 	return ['prep_string_type']
 def prep_bool():
 	return ['prep_bool_type']
 def prep_int():
 	return ['prep_int_type']
 def prep_decimal():
     return ['prep_decimal_type']
 def prep_date():
 	return ['prep_date_type']
 def prep_datetime():
 	return ['prep_datetime_type']
 # import libraries needed
 import hashlib
 import hmac
 import base64
 from datetime import datetime
 from urllib.parse import urlparse
 import requests
 import pandas as pd
 import pytz
 #from tableauprepapi import TableauPrep
 
 ## Configure authorization token
 def auth2philips(integratorUser,integratorKey,urlModule,timeStamp):
     # Authorization
     url = urlparse(urlModule)
 
     urlPath = url.path
     message = urlPath + timeStamp
 
     integratorKey = integratorKey.lower()
 
     hash = hmac.new(integratorKey.encode('utf-8'), message.encode('utf-8'), hashlib.sha256)
     hashInBase64 = base64.b64encode(hash.digest()).decode('utf-8')
     authorization = integratorUser + ':' + hashInBase64
     print("authorizationHeader:" + authorization)
     return authorization
 
 def call_api(urlModule,timeStamp, authorization):
     headers = { "Host":"demo-integrationgateway-v1-server.cloud.pcftest.com",
                 "Timestamp":timeStamp,
                 "Authorization": authorization
                }
 
     response = requests.get(urlModule, headers=headers)
     if response.status_code == 200:
         data = response.json()
         print(data)
         return data
     else:
         print('Error:', response.status_code)
         return {'Error:' + str(response.status_code)}
 
 def get_output_schema() :
     return pd.DataFrame({
         [
             {
                 "serialNumber":prep_string(),
                 "equipmentDataSource": prep_string(),
                 "equipmentType": prep_string(),
                 "assignmentDate": prep_string(),
                 "equipmentId": prep_string()
             }
         ]
     })
 
 def main(df) :
     # looping data come from tableau prep
     records = len(df)
     returnData = pd.DataFrame()
     print ("Records loaded:",records)
     for i in range(records) :
             print ("Records received:",i)
             print(" Patient Id position:",i," content:",df.loc[i, 'patientId'])
             #for index, row in df.iterrows():
             #    print(" patient:",index," content:",row['patientId'])
 
             # Timestamp
             d = datetime.utcnow()
             timeStamp = d.strftime('%Y%m%d%H%M%S')
 
             l_patient_id = df.loc[0,'patientId']
             print('" patient Id received:',l_patient_id)
             urlModule = "https://demo-integrationgateway-v1-server.cloud.pcftest.com/equipment/" + l_patient_id
             authorization = auth2philips("direct_integrationuser_keyrusdemo","57dbf9d0-c9e1-4937-835e-642eaa6ddf82",urlModule,timeStamp)
 
             result = call_api(urlModule, timeStamp,authorization)
 
             #data = {'orgId': '73af4321-390d-46bf-a821-22af30b91c7c', 'dateOfBirth': '1970-01-01T00:00:00.000Z', 'firstName': 'Keyrus', 'lastName': 'TestPatient', 'setupDate': '2023-04-12T00:00:00.000Z', 'patientExternalId': '5678654', 'startTimeOfDay': 12, 'email': 'Test@testpatient.com', 'phoneNumber': '555-555-1243', 'preferredContactMethod': 'phone', 'streetAddress': '123 Any St', 'city': 'Any City', 'state': 'PA', 'zipCode': '5555555555555', 'gender': None, 'countryCode': 'USA', 'subscriberId': '1234567888', 'patientReference': '1234567', 'active': True, 'careTeamUsers': ['2d6a2239-aae7-4b93-ad6f-89dc6bf8af98'], 'locationIds': [], 'payerId': '1e8afa6a-d52a-4756-8918-147c8258b80a', 'patientId': 'c50dd0e1-7cf4-4324-b163-b2ac526e63d6', 'timezone': 'America/New_York'}
             print ("Data equipmentId:",result[0]['equipmentId'])
             returnData.loc[i,'serialNumber'] =  result[0]['serialNumber']
             returnData.loc[i,'equipmentDataSource'] =   result[0]['equipmentDataSource']
             returnData.loc[i,'equipmentType'] =  result[0]['equipmentType']
             returnData.loc[i,'assignmentDate'] =   result[0]['assignmentDate']
             returnData.loc[i,'equipmentId'] =   result[0]['equipmentId']
 
     # convert data to a DataFrame
     print("Final data frame",returnData.head(3))
     return returnData
 
 
 record = {"patientId":["c50dd0e1-7cf4-4324-b163-b2ac526e63d6"],"active":[True]}
 print (record)
 l = pd.DataFrame(record)
 print ("Records loaded:",len(l))
 r = main(l)
 r.head(3)
 def get_output_schema_d8cb6a5611484044b705fadba8bf7882(df = pd.DataFrame()):
     import inspect
     if len(inspect.getfullargspec(get_output_schema).args) == 0:
         return get_output_schema()
     else:
         return get_output_schema(df)
 result_schema_output = get_output_schema_d8cb6a5611484044b705fadba8bf7882(pd.DataFrame(_arg1))
 return result_schema_output.to_dict(orient='split') if isinstance(result_schema_output, pd.DataFrame) else result_schema_output

2023-05-04,17:25:56 [DEBUG] (connectionpool.py:connectionpool:1003): Starting new HTTPS connection (1): demo-integrationgateway-v1-server.cloud.pcftest.com:443
2023-05-04,17:25:56 [DEBUG] (connectionpool.py:connectionpool:456): https://demo-integrationgateway-v1-server.cloud.pcftest.com:443 "GET /equipment/c50dd0e1-7cf4-4324-b163-b2ac526e63d6 HTTP/1.1" 200 None
2023-05-04,17:25:56 [ERROR] (base_handler.py:base_handler:115): Traceback (most recent call last):
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 171, in post
    yield self._post_impl()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 114, in _post_impl
    result = yield self._call_subprocess(function_to_evaluate, arguments)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 780, in run
    yielded = self.gen.throw(exc)
  File "D:\Software\fastAPI\lib\site-packages\tabpy\tabpy_server\handlers\evaluation_plane_handler.py", line 205, in _call_subprocess
    ret = yield gen.with_timeout(timedelta(seconds=self.eval_timeout), future)
  File "D:\Software\fastAPI\lib\site-packages\tornado\gen.py", line 767, in run
    value = future.result()
  File "C:\Software\python\lib\concurrent\futures\thread.py", line 58, in run
    result = self.fn(*self.args, **self.kwargs)
  File "<string>", line 119, in _user_script
  File "<string>", line 116, in get_output_schema_d8cb6a5611484044b705fadba8bf7882
  File "<string>", line 60, in get_output_schema
TypeError: unhashable type: 'list'

2023-05-04,17:25:56 [ERROR] (base_handler.py:base_handler:115): Responding with status=500, message="Error processing script", info="TypeError : unhashable type: 'list'"
2023-05-04,17:25:56 [ERROR] (web.py:web:2344): 500 POST /evaluate (127.0.0.1) 502.36ms
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Checking if need to handle authentication
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Handling authentication
2023-05-04,17:25:56 [INFO] (base_handler.py:base_handler:115): Authentication is not a required feature for API "v1"
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Checking request headers for authentication data
2023-05-04,17:25:56 [INFO] (base_handler.py:base_handler:115): Authorization header not found
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): authentication not required, username and password are none
2023-05-04,17:25:56 [DEBUG] (state.py:state:511): Collecting Access-Control-Allow-Origin from state file ...
2023-05-04,17:25:56 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Origin' from section [Service Info]...
2023-05-04,17:25:56 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:56 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Headers' from section [Service Info]...
2023-05-04,17:25:56 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:56 [DEBUG] (state.py:state:613): Loading option 'Access-Control-Allow-Methods' from section [Service Info]...
2023-05-04,17:25:56 [DEBUG] (state.py:state:635): Returning value ''
2023-05-04,17:25:56 [DEBUG] (base_handler.py:base_handler:115): Processing POST request...
